#include <list>
#include <stack>
#include <iostream>
#include <fstream>
//#include <conio>
#include <string>
#include <cstdlib>
#include "avltree.h"
//#include "avlnode.h"


//using namespace std;



#ifndef lex_h
#define lex_h

class Lex
{
	private:
		int line_no;//usee to save the line no
		int state,lexeme_beginning,lexeme_end,nextchar,flag;//flag is used to check the input and output files
		char * buffer1;//used to buffer the nput got
		int size_buf;// used to save the size of the buffer
		char * adrs;// usd 2 save the adrs of sorc file
		char * dest_adr;// used 2 savee the adrs of the dest file
		bool error_id,error_num;//iniialy they r flse if no or id gets false they r true
		bool read_flag;//it is uesd to chk whther to read or not next flag at the state 0.
						//if u have already read next chr then this is false else true at true u read t
						//the char at state 0
		bool buf_flag;//it is flag to chk whether the bufer have ne more input to give or not
		bool new_tree;
	
	public:
		bool add_st;//chk b4 adding to symbol table that neede or not.When function begins this is set to flse so that scope can be cheked
		list < int > tokens;// used to save the tokens generated by the lex
		Lex(){add_st=true;}// default constructor
		Lex(char*,char*);
		~Lex();//destructor
		bool getbuf_flag(){return buf_flag;}
		int get_buffer1(){return size_buf;}
		int get_lexeme_end(){return lexeme_end;}
		int insert_st();//stub 4 symbol table
		void print_headings(char*);//print the token lexeme n # hedng in file
		int chk_kw();//chks  kiwrd rtrns true if it is kwrd
		int get_state(char);//returns the 1ststartingstate in the transition state
		char next_char();//returns the next character
		void read_fil();//reads 1 block of file into the buffer1 starting from 1024*int pasd
		void rit_fil(char*,int,int);//token name,length of token, numeric rep of token
		int get_number(char *,int);//to return num corresponding to the token
//		int analyse(stack <Avltree*>);//te main routine doing the analysis
		int analyse(stack <Avltree*>&,stack <string>&);//te main routine doing the analysis

		bool is_letter(char);
		bool is_digit(char);
		bool is_separator(char);//for identifier returnstrue if legal separator false otherwise
		void retract(int);//moves back the nextchar by the nit given in arguements
		int get_line_num(){return line_no;}
		char* get_lexeme();
};
#endif